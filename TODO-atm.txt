Andy Maxwell things to fix:

TODO: Logging to INFO and ERROR, not STDIO as that messes up the MCP client.

TODO: Add shared mailbox functionallity
CLAUDE suggested changes:

After reviewing your Python code, here are the changes you'd need to make to access a shared inbox in Outlook via MAPI:

The main issue is that your code currently only looks for folders within the default namespace folders and inbox subfolders. To access shared inboxes, you need to modify the `connect_to_outlook` and `get_folder_by_name` functions.

Here are the specific changes needed:

1. First, modify the `connect_to_outlook` function to optionally accept a shared mailbox name:

```python
def connect_to_outlook(shared_mailbox=None):
    """Connect to Outlook application using COM with optional shared mailbox"""
    try:
        outlook = win32com.client.Dispatch("Outlook.Application")
        namespace = outlook.GetNamespace("MAPI")
        
        # If a shared mailbox is specified, attempt to access it
        if shared_mailbox:
            recipient = namespace.CreateRecipient(shared_mailbox)
            recipient.Resolve()
            
            if recipient.Resolved:
                shared_inbox = namespace.GetSharedDefaultFolder(recipient, 6)  # 6 is the index for inbox folder
                return outlook, namespace, shared_inbox
            else:
                raise Exception(f"Could not resolve shared mailbox: {shared_mailbox}")
                
        return outlook, namespace
    except Exception as e:
        raise Exception(f"Failed to connect to Outlook: {str(e)}")
```

2. Update the `get_folder_by_name` function to support shared mailboxes:

```python
def get_folder_by_name(namespace, folder_name: str, shared_inbox=None):
    """Get a specific Outlook folder by name, optionally within a shared mailbox"""
    try:
        if shared_inbox:
            # If we have a shared inbox, look for the folder within it
            for folder in shared_inbox.Folders:
                if folder.Name.lower() == folder_name.lower():
                    return folder
            
            # If not found in direct subfolders, return None
            return None
            
        # Original code for searching personal mailbox...
        # First check inbox subfolder
        inbox = namespace.GetDefaultFolder(6)  # 6 is the index for inbox folder
        
        # Rest of the original function remains the same
```

3. Create a new helper function to enumerate shared mailboxes:

```python
def list_shared_mailboxes(namespace):
    """List all shared mailboxes available to the user"""
    shared_mailboxes = []
    
    # Get all stores (including shared mailboxes)
    stores = namespace.Stores
    
    for store in stores:
        # Check if this is not the default store (i.e., it's a shared mailbox)
        if not store.IsDefaultStore:
            shared_mailboxes.append({
                "name": store.DisplayName,
                "store": store
            })
    
    return shared_mailboxes
```

4. Create a new MCP tool to list shared mailboxes:

```python
@mcp.tool()
def list_shared_mailboxes() -> str:
    """
    List all shared mailboxes available in Outlook
    
    Returns:
        A list of available shared mailboxes
    """
    try:
        # Connect to Outlook
        _, namespace = connect_to_outlook()
        
        # Get shared mailboxes
        shared_mailboxes = list_shared_mailboxes(namespace)
        
        if not shared_mailboxes:
            return "No shared mailboxes found."
        
        result = "Available shared mailboxes:\n\n"
        for i, mailbox in enumerate(shared_mailboxes, 1):
            result += f"{i}. {mailbox['name']}\n"
        
        return result
    except Exception as e:
        return f"Error listing shared mailboxes: {str(e)}"
```

5. Modify your existing tools to support shared mailboxes by adding a `shared_mailbox` parameter:

```python
@mcp.tool()
def list_recent_emails(days: int = 7, folder_name: Optional[str] = None, shared_mailbox: Optional[str] = None) -> str:
    """
    List email titles from the specified number of days
    
    Args:
        days: Number of days to look back for emails (max 30)
        folder_name: Name of the folder to check (if not specified, checks the Inbox)
        shared_mailbox: Email address of the shared mailbox to access (if not specified, uses personal mailbox)
        
    Returns:
        Numbered list of email titles with sender information
    """
    # Rest of your function here, modified to use the shared_mailbox parameter
```

Apply similar changes to your other email-related tools.

These modifications should allow your code to access shared inboxes in Outlook via MAPI. The key is using the `GetSharedDefaultFolder` method with a resolved recipient to access mailboxes that have been shared with you.

###########################################################
########### COMPLETE CODE ################################


import datetime
import os
import win32com.client
import logging
import sys
from typing import List, Optional, Dict, Any
from mcp.server.fastmcp import FastMCP, Context



# Set up logging to stderr
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s [%(levelname)s] %(message)s',
    handlers=[logging.StreamHandler(sys.stderr)]
)
logger = logging.getLogger('outlook_mcp')


# Initialize FastMCP server
mcp = FastMCP("outlook-assistant")

# Constants
MAX_DAYS = 30
# Email cache for storing retrieved emails by number
email_cache = {}

# Helper functions
def connect_to_outlook(shared_mailbox=None):
    """Connect to Outlook application using COM with optional shared mailbox"""
    try:
        outlook = win32com.client.Dispatch("Outlook.Application")
        namespace = outlook.GetNamespace("MAPI")
        
        # If a shared mailbox is specified, attempt to access it
        if shared_mailbox:
            recipient = namespace.CreateRecipient(shared_mailbox)
            recipient.Resolve()
            
            if recipient.Resolved:
                shared_inbox = namespace.GetSharedDefaultFolder(recipient, 6)  # 6 is the index for inbox folder
                return outlook, namespace, shared_inbox
            else:
                raise Exception(f"Could not resolve shared mailbox: {shared_mailbox}")
                
        return outlook, namespace
    except Exception as e:
        raise Exception(f"Failed to connect to Outlook: {str(e)}")

def get_folder_by_name(namespace, folder_name: str, shared_inbox=None):
    """Get a specific Outlook folder by name, optionally within a shared mailbox"""
    try:
        # If we have a shared inbox, look for the folder within it
        if shared_inbox:
            for folder in shared_inbox.Folders:
                if folder.Name.lower() == folder_name.lower():
                    return folder
            
            # If not found in direct subfolders
            return None
        
        # First check inbox subfolder
        inbox = namespace.GetDefaultFolder(6)  # 6 is the index for inbox folder
        
        # Check inbox subfolders first (most common)
        for folder in inbox.Folders:
            if folder.Name.lower() == folder_name.lower():
                return folder
                
        # Then check all folders at root level
        for folder in namespace.Folders:
            if folder.Name.lower() == folder_name.lower():
                return folder
            
            # Also check subfolders
            for subfolder in folder.Folders:
                if subfolder.Name.lower() == folder_name.lower():
                    return subfolder
                    
        # If not found
        return None
    except Exception as e:
        raise Exception(f"Failed to access folder {folder_name}: {str(e)}")

def list_shared_mailboxes(namespace):
    """List all shared mailboxes available to the user"""
    shared_mailboxes = []
    
    # Get all stores (including shared mailboxes)
    stores = namespace.Stores
    
    for store in stores:
        # Check if this is not the default store (i.e., it's a shared mailbox)
        if not store.IsDefaultStore:
            shared_mailboxes.append({
                "name": store.DisplayName,
                "store": store
            })
    
    return shared_mailboxes

def format_email(mail_item) -> Dict[str, Any]:
    """Format an Outlook mail item into a structured dictionary"""
    try:
        # Extract recipients
        recipients = []
        if mail_item.Recipients:
            for i in range(1, mail_item.Recipients.Count + 1):
                recipient = mail_item.Recipients(i)
                try:
                    recipients.append(f"{recipient.Name} <{recipient.Address}>")
                except:
                    recipients.append(f"{recipient.Name}")
        
        # Format the email data
        email_data = {
            "id": mail_item.EntryID,
            "conversation_id": mail_item.ConversationID if hasattr(mail_item, 'ConversationID') else None,
            "subject": mail_item.Subject,
            "sender": mail_item.SenderName,
            "sender_email": mail_item.SenderEmailAddress,
            "received_time": mail_item.ReceivedTime.strftime("%Y-%m-%d %H:%M:%S") if mail_item.ReceivedTime else None,
            "recipients": recipients,
            "body": mail_item.Body,
            "has_attachments": mail_item.Attachments.Count > 0,
            "attachment_count": mail_item.Attachments.Count if hasattr(mail_item, 'Attachments') else 0,
            "unread": mail_item.UnRead if hasattr(mail_item, 'UnRead') else False,
            "importance": mail_item.Importance if hasattr(mail_item, 'Importance') else 1,
            "categories": mail_item.Categories if hasattr(mail_item, 'Categories') else ""
        }
        return email_data
    except Exception as e:
        raise Exception(f"Failed to format email: {str(e)}")

def clear_email_cache():
    """Clear the email cache"""
    global email_cache
    email_cache = {}

def get_emails_from_folder(folder, days: int, search_term: Optional[str] = None):
    """Get emails from a folder with optional search filter"""
    emails_list = []
    
    # Calculate the date threshold
    now = datetime.datetime.now()
    threshold_date = now - datetime.timedelta(days=days)
    
    try:
        # Set up filtering
        folder_items = folder.Items
        folder_items.Sort("[ReceivedTime]", True)  # Sort by received time, newest first
        
        # If we have a search term, apply it
        if search_term:
            # Handle OR operators in search term
            search_terms = [term.strip() for term in search_term.split(" OR ")]
            
            # Try to create a filter for subject, sender name or body
            try:
                # Build SQL filter with OR conditions for each search term
                sql_conditions = []
                for term in search_terms:
                    sql_conditions.append(f"\"urn:schemas:httpmail:subject\" LIKE '%{term}%'")
                    sql_conditions.append(f"\"urn:schemas:httpmail:fromname\" LIKE '%{term}%'")
                    sql_conditions.append(f"\"urn:schemas:httpmail:textdescription\" LIKE '%{term}%'")
                
                filter_term = f"@SQL=" + " OR ".join(sql_conditions)
                folder_items = folder_items.Restrict(filter_term)
            except:
                # If filtering fails, we'll do manual filtering later
                pass
        
        # Process emails
        count = 0
        for item in folder_items:
            try:
                if hasattr(item, 'ReceivedTime') and item.ReceivedTime:
                    # Convert to naive datetime for comparison
                    received_time = item.ReceivedTime.replace(tzinfo=None)
                    
                    # Skip emails older than our threshold
                    if received_time < threshold_date:
                        continue
                    
                    # Manual search filter if needed
                    if search_term and folder_items == folder.Items:  # If we didn't apply filter earlier
                        # Handle OR operators in search term for manual filtering
                        search_terms = [term.strip().lower() for term in search_term.split(" OR ")]
                        
                        # Check if any of the search terms match
                        found_match = False
                        for term in search_terms:
                            if (term in item.Subject.lower() or 
                                term in item.SenderName.lower() or 
                                term in item.Body.lower()):
                                found_match = True
                                break
                        
                        if not found_match:
                            continue
                    
                    # Format and add the email
                    email_data = format_email(item)
                    emails_list.append(email_data)
                    count += 1
            except Exception as e:
                print(f"Warning: Error processing email: {str(e)}")
                continue
                
    except Exception as e:
        print(f"Error retrieving emails: {str(e)}")
        
    return emails_list

# MCP Tools
@mcp.tool()
def list_folders() -> str:
    """
    List all available mail folders in Outlook
    
    Returns:
        A list of available mail folders
    """
    try:
        # Connect to Outlook
        _, namespace = connect_to_outlook()
        
        result = "Available mail folders:\n\n"
        
        # List all root folders and their subfolders
        for folder in namespace.Folders:
            result += f"- {folder.Name}\n"
            
            # List subfolders
            for subfolder in folder.Folders:
                result += f"  - {subfolder.Name}\n"
                
                # List subfolders (one more level)
                try:
                    for subsubfolder in subfolder.Folders:
                        result += f"    - {subsubfolder.Name}\n"
                except:
                    pass
        
        return result
    except Exception as e:
        return f"Error listing mail folders: {str(e)}"

@mcp.tool()
def list_shared_mailboxes() -> str:
    """
    List all shared mailboxes available in Outlook
    
    Returns:
        A list of available shared mailboxes
    """
    try:
        # Connect to Outlook
        _, namespace = connect_to_outlook()
        
        # Get shared mailboxes
        shared_mboxes = list_shared_mailboxes(namespace)
        
        if not shared_mboxes:
            return "No shared mailboxes found."
        
        result = "Available shared mailboxes:\n\n"
        for i, mailbox in enumerate(shared_mboxes, 1):
            result += f"{i}. {mailbox['name']}\n"
        
        return result
    except Exception as e:
        return f"Error listing shared mailboxes: {str(e)}"

@mcp.tool()
def list_recent_emails(days: int = 7, folder_name: Optional[str] = None, shared_mailbox: Optional[str] = None) -> str:
    """
    List email titles from the specified number of days
    
    Args:
        days: Number of days to look back for emails (max 30)
        folder_name: Name of the folder to check (if not specified, checks the Inbox)
        shared_mailbox: Email address of the shared mailbox to access (if not specified, uses personal mailbox)
        
    Returns:
        Numbered list of email titles with sender information
    """
    if not isinstance(days, int) or days < 1 or days > MAX_DAYS:
        return f"Error: 'days' must be an integer between 1 and {MAX_DAYS}"
    
    try:
        # Connect to Outlook
        if shared_mailbox:
            try:
                _, namespace, shared_inbox = connect_to_outlook(shared_mailbox)
                if folder_name:
                    folder = get_folder_by_name(namespace, folder_name, shared_inbox)
                    if not folder:
                        return f"Error: Folder '{folder_name}' not found in shared mailbox '{shared_mailbox}'"
                else:
                    folder = shared_inbox  # Use the shared inbox itself
            except Exception as e:
                return f"Error accessing shared mailbox '{shared_mailbox}': {str(e)}"
        else:
            # Regular mailbox access
            _, namespace = connect_to_outlook()
            
            # Get the appropriate folder
            if folder_name:
                folder = get_folder_by_name(namespace, folder_name)
                if not folder:
                    return f"Error: Folder '{folder_name}' not found"
            else:
                folder = namespace.GetDefaultFolder(6)  # Default inbox
        
        # Clear previous cache
        clear_email_cache()
        
        # Get emails from folder
        emails = get_emails_from_folder(folder, days)
        
        # Format the output and cache emails
        mailbox_display = f"shared mailbox '{shared_mailbox}'" if shared_mailbox else "your mailbox"
        folder_display = f"'{folder_name}'" if folder_name else "Inbox"
        if not emails:
            return f"No emails found in {folder_display} of {mailbox_display} from the last {days} days."
        
        result = f"Found {len(emails)} emails in {folder_display} of {mailbox_display} from the last {days} days:\n\n"
        
        # Cache emails and build result
        for i, email in enumerate(emails, 1):
            # Store in cache
            email_cache[i] = email
            
            # Format for display
            result += f"Email #{i}\n"
            result += f"Subject: {email['subject']}\n"
            result += f"From: {email['sender']} <{email['sender_email']}>\n"
            result += f"Received: {email['received_time']}\n"
            result += f"Read Status: {'Read' if not email['unread'] else 'Unread'}\n"
            result += f"Has Attachments: {'Yes' if email['has_attachments'] else 'No'}\n\n"
        
        result += "To view the full content of an email, use the get_email_by_number tool with the email number."
        return result
    
    except Exception as e:
        return f"Error retrieving email titles: {str(e)}"

@mcp.tool()
def search_emails(search_term: str, days: int = 7, folder_name: Optional[str] = None, shared_mailbox: Optional[str] = None) -> str:
    """
    Search emails by contact name or keyword within a time period
    
    Args:
        search_term: Name or keyword to search for
        days: Number of days to look back (max 30)
        folder_name: Name of the folder to search (if not specified, searches the Inbox)
        shared_mailbox: Email address of the shared mailbox to access (if not specified, uses personal mailbox)
        
    Returns:
        Numbered list of matching email titles
    """
    if not search_term:
        return "Error: Please provide a search term"
        
    if not isinstance(days, int) or days < 1 or days > MAX_DAYS:
        return f"Error: 'days' must be an integer between 1 and {MAX_DAYS}"
    
    try:
        # Connect to Outlook
        if shared_mailbox:
            try:
                _, namespace, shared_inbox = connect_to_outlook(shared_mailbox)
                if folder_name:
                    folder = get_folder_by_name(namespace, folder_name, shared_inbox)
                    if not folder:
                        return f"Error: Folder '{folder_name}' not found in shared mailbox '{shared_mailbox}'"
                else:
                    folder = shared_inbox  # Use the shared inbox itself
            except Exception as e:
                return f"Error accessing shared mailbox '{shared_mailbox}': {str(e)}"
        else:
            # Regular mailbox access
            _, namespace = connect_to_outlook()
            
            # Get the appropriate folder
            if folder_name:
                folder = get_folder_by_name(namespace, folder_name)
                if not folder:
                    return f"Error: Folder '{folder_name}' not found"
            else:
                folder = namespace.GetDefaultFolder(6)  # Default inbox
        
        # Clear previous cache
        clear_email_cache()
        
        # Get emails matching search term
        emails = get_emails_from_folder(folder, days, search_term)
        
        # Format the output and cache emails
        mailbox_display = f"shared mailbox '{shared_mailbox}'" if shared_mailbox else "your mailbox"
        folder_display = f"'{folder_name}'" if folder_name else "Inbox"
        if not emails:
            return f"No emails matching '{search_term}' found in {folder_display} of {mailbox_display} from the last {days} days."
        
        result = f"Found {len(emails)} emails matching '{search_term}' in {folder_display} of {mailbox_display} from the last {days} days:\n\n"
        
        # Cache emails and build result
        for i, email in enumerate(emails, 1):
            # Store in cache
            email_cache[i] = email
            
            # Format for display
            result += f"Email #{i}\n"
            result += f"Subject: {email['subject']}\n"
            result += f"From: {email['sender']} <{email['sender_email']}>\n"
            result += f"Received: {email['received_time']}\n"
            result += f"Read Status: {'Read' if not email['unread'] else 'Unread'}\n"
            result += f"Has Attachments: {'Yes' if email['has_attachments'] else 'No'}\n\n"
        
        result += "To view the full content of an email, use the get_email_by_number tool with the email number."
        return result
    
    except Exception as e:
        return f"Error searching emails: {str(e)}"

@mcp.tool()
def get_email_by_number(email_number: int) -> str:
    """
    Get detailed content of a specific email by its number from the last listing
    
    Args:
        email_number: The number of the email from the list results
        
    Returns:
        Full details of the specified email
    """
    try:
        if not email_cache:
            return "Error: No emails have been listed yet. Please use list_recent_emails or search_emails first."
        
        if email_number not in email_cache:
            return f"Error: Email #{email_number} not found in the current listing."
        
        email_data = email_cache[email_number]
        
        # Connect to Outlook to get the full email content
        _, namespace = connect_to_outlook()
        
        # Retrieve the specific email
        email = namespace.GetItemFromID(email_data["id"])
        if not email:
            return f"Error: Email #{email_number} could not be retrieved from Outlook."
        
        # Format the output
        result = f"Email #{email_number} Details:\n\n"
        result += f"Subject: {email_data['subject']}\n"
        result += f"From: {email_data['sender']} <{email_data['sender_email']}>\n"
        result += f"Received: {email_data['received_time']}\n"
        result += f"Recipients: {', '.join(email_data['recipients'])}\n"
        result += f"Has Attachments: {'Yes' if email_data['has_attachments'] else 'No'}\n"
        
        if email_data['has_attachments']:
            result += "Attachments:\n"
            for i in range(1, email.Attachments.Count + 1):
                attachment = email.Attachments(i)
                result += f"  - {attachment.FileName}\n"
        
        result += "\nBody:\n"
        result += email_data['body']
        
        result += "\n\nTo reply to this email, use the reply_to_email_by_number tool with this email number."
        
        return result
    
    except Exception as e:
        return f"Error retrieving email details: {str(e)}"

@mcp.tool()
def reply_to_email_by_number(email_number: int, reply_text: str) -> str:
    """
    Reply to a specific email by its number from the last listing
    
    Args:
        email_number: The number of the email from the list results
        reply_text: The text content for the reply
        
    Returns:
        Status message indicating success or failure
    """
    try:
        if not email_cache:
            return "Error: No emails have been listed yet. Please use list_recent_emails or search_emails first."
        
        if email_number not in email_cache:
            return f"Error: Email #{email_number} not found in the current listing."
        
        email_id = email_cache[email_number]["id"]
        
        # Connect to Outlook
        outlook, namespace = connect_to_outlook()
        
        # Retrieve the specific email
        email = namespace.GetItemFromID(email_id)
        if not email:
            return f"Error: Email #{email_number} could not be retrieved from Outlook."
        
        # Create reply
        reply = email.Reply()
        reply.Body = reply_text
        
        # Send the reply
        reply.Send()
        
        return f"Reply sent successfully to: {email.SenderName} <{email.SenderEmailAddress}>"
    
    except Exception as e:
        return f"Error replying to email: {str(e)}"

@mcp.tool()
def compose_email(recipient_email: str, subject: str, body: str, cc_email: Optional[str] = None) -> str:
    """
    Compose and send a new email
    
    Args:
        recipient_email: Email address of the recipient
        subject: Subject line of the email
        body: Main content of the email
        cc_email: Email address for CC (optional)
        
    Returns:
        Status message indicating success or failure
    """
    try:
        # Connect to Outlook
        outlook, _ = connect_to_outlook()
        
        # Create a new email
        mail = outlook.CreateItem(0)  # 0 is the value for a mail item
        mail.Subject = subject
        mail.To = recipient_email
        
        if cc_email:
            mail.CC = cc_email
        
        # Add signature to the body
        mail.Body = body
        
        # Send the email
        mail.Send()
        
        return f"Email sent successfully to: {recipient_email}"
    
    except Exception as e:
        return f"Error sending email: {str(e)}"

# Run the server
if __name__ == "__main__":
    logger.info("Starting Outlook MCP Server...")
    logger.info("Connecting to Outlook...")
    
    try:
        # Test Outlook connection
        outlook, namespace = connect_to_outlook()
        inbox = namespace.GetDefaultFolder(6)  # 6 is inbox
        logger.info(f"Successfully connected to Outlook. Inbox has {inbox.Items.Count} items.")
        
        # Run the MCP server
        logger.info("Starting MCP server. Press Ctrl+C to stop.")
        mcp.run()
    except Exception as e:
        logger.error(f"Error starting server: {str(e)}")

